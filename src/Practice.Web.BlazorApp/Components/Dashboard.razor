@using System.Reflection
@using Practice.Web.BlazorApp.Models
@using Practice.Web.BlazorApp.Utilities
@typeparam T where T : class
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage;
@inject NavigationManager Navigation

<h3>Dashboard</h3>

@if (!string.IsNullOrEmpty(_message))
{
    <p>@_message</p>
}

@if (_data is { Length: > 0 })
{
    <table class="table">
        <thead>
        <tr>
            @foreach (var property in _propertyInfos)
            {
                <th>@{ DisplayHelper.GetDisplayName<T>(property.Name); }</th>
            }
        </tr>
        </thead>
        <tbody>
        @foreach (var user in _data)
        {
            <tr>
                @foreach (var property in _propertyInfos)
                {
                    <td>@property.GetValue(user)</td>
                }
            </tr>
        }
        </tbody>
    </table>

    <div>
        <button @onclick="GoToPreviousPage" class="btn btn-primary" disabled="@(!CanGoToPreviousPage())">Previous</button>
        <span>Page @_currentPage of @_totalPages</span>
        <button @onclick="GoToNextPage" class="btn btn-primary" disabled="@(!CanGoToNextPage())">Next</button>
    </div>
}
else
{
    <p>No data found.</p>
}

@code {
    [Parameter, EditorRequired]
    public Func<int, int, Task<DashboardModel<T>>> LoadDataFunc { get; set; }
    
    private T[] _data = [];
    private int _currentPage = 1;
    private int _pageSize = 5;
    private int _totalPages;
    private string _message;
    private PropertyInfo[] _propertyInfos;
    
    protected override async Task OnInitializedAsync()
    {
        _propertyInfos = typeof(T).GetProperties();
        await RefreshData();
    }

    private async Task RefreshData()
    {
        var dashboard = await LoadDataFunc(_currentPage, _pageSize);
        _data = dashboard.Data;
        var totalCount = dashboard.TotalCount;
        
        _totalPages = (int)Math.Ceiling((double)totalCount / _pageSize);

        _message = string.Empty;
    }

    private async Task GoToPreviousPage()
    {
        if (_currentPage <= 1) return;
        
        _currentPage--;
        await RefreshData();
    }

    private async Task GoToNextPage()
    {
        if (_currentPage >= _totalPages) return;
        
        _currentPage++;
        await RefreshData();
    }

    private bool CanGoToPreviousPage() => _currentPage > 1;

    private bool CanGoToNextPage() => _currentPage < _totalPages;
}